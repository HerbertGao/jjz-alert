# JJZ-Alert v2.0 完整配置示例
# 新架构：Redis缓存 + Apprise多通道推送 + 智能家居集成

# =============================================================================
# 全局配置
# =============================================================================
global:
  # 日志配置
  log:
    level: INFO  # DEBUG, INFO, WARNING, ERROR

  # 管理员通知配置（系统错误、状态通知）
  admin:
    notifications:
      - type: apprise
        urls:
          - "tgram://bot_token/admin_chat_id"     # Telegram管理员群
          - "mailto://admin@example.com"          # 管理员邮箱
          - "wxwork://admin_webhook_key"          # 企业微信管理员


  # 定时提醒配置
  remind:
    enable: true
    times: ["07:00", "12:30", "19:00", "23:55"]  # 推送时机
    api:
      enable: true
      host: "0.0.0.0"
      port: 8000

  # Redis数据缓存配置
  redis:
    host: localhost
    port: 6379
    db: 0
    # password: "your_redis_password"  # 如果设置了密码
    # connection_pool_size: 10

  # 缓存策略配置
  cache:
    push_history_ttl: 2592000  # 推送历史缓存30天
    # 注意：进京证数据每次运行主流程时都重新查询，缓存数据仅供推送和后续操作使用
    # 限行规则默认缓存到当天24:00

  # Home Assistant集成配置（可选）
  homeassistant:
    enabled: false
    # 二选一集成模式：rest 或 mqtt（默认 rest）
    integration_mode: rest

    # ========== 当使用 REST 模式时，需配置以下参数 ==========
    url: "http://homeassistant.local:8123"
    token: "your_long_lived_access_token_here"
    entity_prefix: "jjz_alert"

    # 同步配置（REST）
    sync_after_query: true               # 每次查询后同步到HA

    # 错误处理（REST）
    retry_count: 3                       # 同步失败重试次数
    timeout: 30                          # 请求超时(秒)

    # 设备创建配置（REST）
    create_device_per_plate: true        # 为每个车牌创建独立设备
    device_manufacturer: "JJZ Alert"     # 设备制造商
    device_model: "Beijing Vehicle"      # 设备型号

    # ========== 当使用 MQTT 模式时，需配置以下参数 ==========
    mqtt_host: "homeassistant.local"
    mqtt_port: 1883
    mqtt_username: "ha"
    mqtt_password: "your_password"
    mqtt_client_id: "jjz_alert"
    mqtt_discovery_prefix: "homeassistant"   # 通常保持默认
    mqtt_base_topic: "jjz_alert"             # 实体命名与主题前缀
    mqtt_qos: 1
    mqtt_retain: true

# =============================================================================
# 进京证账户配置（数据来源）
# =============================================================================
jjz_accounts:
  - name: "张三账户"
    jjz:
      token: "your_jjz_token_1_here"
      url: "https://jjz.jtgl.beijing.gov.cn:2443/pro/applyRecordController/stateList"
  
  - name: "李四账户"
    jjz:
      token: "your_jjz_token_2_here"
      url: "https://jjz.jtgl.beijing.gov.cn:1443/pro/applyRecordController/stateList"

# =============================================================================
# 车牌配置（推送目标）
# =============================================================================
plates:
  # 示例1：Apprise多通道推送（推荐）- 使用变量占位符
  - plate: "京C11111"
    display_name: "智能家居车辆"
    icon: "https://example.com/smart_car_icon.png"
    notifications:
      - type: apprise
        urls:
          - "barks://api.day.app/device_key?level={level}&group={plate}&icon={icon}"  # Bark with placeholders
          - "tgram://bot_token/chat_id"           # Telegram
          - "mailto://user:pass@gmail.com"        # 邮件
          - "wxwork://webhook_key"                # 企业微信
          - "dingding://token/secret"             # 钉钉
          - "json://your-webhook-url.com/notify"  # 自定义Webhook

  # 示例2：Apprise多通道推送 - 完整配置
  - plate: "京D22222"
    display_name: "公司车辆"
    icon: "https://example.com/company_car_icon.png"
    notifications:
      - type: apprise
        urls:
          - "tgram://bot_token/company_group"     # 公司群组
          - "mailto://fleet@company.com"          # 车队邮箱


  # 示例3：多个Apprise配置（不同用途）
  - plate: "京E33333"
    display_name: "家庭用车"
    icon: "https://example.com/family_car_icon.png"
    notifications:
      # 家庭成员通知
      - type: apprise
        urls:
          - "tgram://bot_token/family_group"
          - "barks://api.day.app/dad_device?level={level}&group={plate}&icon={icon}"
          - "barks://api.day.app/mom_device?level={level}&group={plate}&icon={icon}"

      
      # 管理通知
      - type: apprise
        urls:
          - "mailto://family-admin@example.com"


# =============================================================================
# v2.0 新特性说明
# =============================================================================
#
# 🔄 向后兼容性：
#   - 现有v1.x配置100%兼容
#   - 自动检测并转换配置格式
#   - 原配置文件自动备份
#
# 🆕 v2.0 新增功能：
#   1. Redis缓存 - 进京证数据每次运行主流程时都重新查询，缓存数据仅供推送和后续操作使用
#   2. Apprise多通道推送 - 支持80+推送服务
#   3. 车牌级别图标配置 - 多通道共用
#   4. 管理员通知移到global中 - 更易配置
#   5. Home Assistant集成 - 智能家居支持
#   6. CLI工具 - 配置验证、迁移、测试
#
# 🛠️ CLI工具使用：
#   - 配置验证：python cli_tools.py validate
#   - 配置迁移：python cli_tools.py migrate
#   - 推送测试：python cli_tools.py test-push --plate 京A12345
#   - 系统状态：python cli_tools.py status -v
#
# 📱 支持的Apprise服务（部分）：
#   - bark:// - Bark推送
#   - tgram:// - Telegram
#   - mailto:// - 邮件
#   - wxwork:// - 企业微信
#   - dingding:// - 钉钉
#   - slack:// - Slack
#   - discord:// - Discord
#   - teams:// - Microsoft Teams
#   - webhook:// - 自定义Webhook
#   - json:// - JSON格式Webhook
#   更多服务请参考：https://github.com/caronc/apprise
#
# 🏠 Home Assistant集成说明：
#   1. 启用条件：
#      - 设置 homeassistant.enabled: true
#      - 配置有效的 URL 和 Token
#   
#   2. 设备组织方式：
#      - 每个车牌创建一个独立设备
#      - 设备名称：进京证监控 {车牌显示名称}
#      - 每个设备包含4个实体，涵盖完整车辆状态
#   
#   3. 工作方式：
#      - 每次查询进京证和限行数据后自动同步到HA
#      - 无需定时任务，简单高效
#   
#   4. 每个车牌设备包含的实体：
#      - sensor.jjz_alert_{plate}_permit: 进京证详细状态
#      - binary_sensor.jjz_alert_{plate}_permit_valid: 进京证是否有效
#      - sensor.jjz_alert_{plate}_traffic: 限行详细状态  
#      - binary_sensor.jjz_alert_{plate}_traffic_limited: 今日是否限行
#   
#   5. 设备属性包含（完整车辆信息）：
#      - 车牌号、进京证类型、进京证状态
#      - 进京证有效期、剩余天数
#      - 六环内进京证剩余次数
#      - 当日是否限行、限行规则
#      - 车牌尾号、数据来源等
#   
#   6. 获取HA Token：
#      - 登录Home Assistant
#      - 用户配置 -> 安全 -> 长期访问令牌
#      - 创建新令牌并复制到配置文件
#
# =============================================================================