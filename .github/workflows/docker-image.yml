name: Docker Image Build

on:
  push:
    branches: [ '**' ]
  workflow_dispatch:
    inputs:
      version:
        description: 'version of this branch'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        # 启用缓存功能
        driver-opts: |
          image=moby/buildkit:v0.12.0

    - name: Log into GitHub Container Registry
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Determine version and tags
      run: |
        # 获取分支名，移除 refs/heads/ 前缀
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        # 将分支名中的特殊字符替换为连字符，确保标签有效
        SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9.-]/-/g')
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.version }}"
        elif [ "$BRANCH_NAME" = "master" ]; then
          VERSION="${{ github.sha }}"
        else
          VERSION="$SAFE_BRANCH_NAME"
        fi
        echo "IMAGE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

    - name: Build and push Docker image
      run: |
        PLATFORMS=linux/arm64,linux/amd64
        DOCKER_IMAGE=ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        ARCH_TAGS="arm64 amd64"
        VERSION=${{ env.IMAGE_VERSION }}
        BRANCH_NAME=${{ env.BRANCH_NAME }}
        echo "DOCKER_IMAGE_LOWERCASE=$DOCKER_IMAGE" >> $GITHUB_ENV
        
        # 优化：使用缓存构建多架构镜像
        if [ "$BRANCH_NAME" = "master" ]; then
          # master分支打latest标签
          docker buildx build --platform $PLATFORMS \
            -f Dockerfile.github-actions \
            -t $DOCKER_IMAGE:latest \
            -t $DOCKER_IMAGE:${VERSION} \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --push .
        else
          # 其他分支只打分支名标签
          docker buildx build --platform $PLATFORMS \
            -f Dockerfile.github-actions \
            -t $DOCKER_IMAGE:${VERSION} \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --push .
        fi
        
        # 优化：使用缓存构建架构特定镜像
        for ARCH in $ARCH_TAGS; do
          if [ "$ARCH" == "arm64" ]; then
            TAG_ARCH="aarch64"
          else
            TAG_ARCH=$ARCH
          fi
          if [ "$BRANCH_NAME" = "master" ]; then
            # master分支的架构镜像也打latest标签
            docker buildx build --platform linux/${ARCH} \
              -f Dockerfile.github-actions \
              -t ${DOCKER_IMAGE}-${TAG_ARCH}:latest \
              -t ${DOCKER_IMAGE}-${TAG_ARCH}:${VERSION} \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              --push .
          else
            # 其他分支的架构镜像只打分支名标签
            docker buildx build --platform linux/${ARCH} \
              -f Dockerfile.github-actions \
              -t ${DOCKER_IMAGE}-${TAG_ARCH}:${VERSION} \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              --push .
          fi
        done

    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE_LOWERCASE }}:${{ env.IMAGE_VERSION }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 